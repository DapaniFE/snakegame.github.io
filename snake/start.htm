<html>
<head>

    <title>SNAKE</title>
    <meta charset='utf-8'>
    <script type='text/javascript' src='lib/key_codes.js'></script>
    <script type='text/javascript' src='lib/underscore.js'></script>
    <script type='text/javascript' src='lib/lib.js'></script>
    <script type='text/javascript' src='lib/lib2.js'></script>

    <style>
        .css_main_screen {
            border: 0.5rem outset pink;
        }
    </style>

</head>
<body onload=main() background="resources/web/bacgr_red.gif">
<script>

    var __ = {};
    __.RHAL = runtime_HAL;

    // АЛГОРИТМы ///////////////////////////////////////////////////////////

    function fill_map_by_keys(map, keys, value)
    {
	_.each(keys, function(v,k,l){ map[v] = value; });
    }

    // ОПЕРАТОР: [A,B] --> ["AxB"]
        
    function To_Str(a) {
        var str = '' + a[0] + 'x' + a[1];
        return (str);
    }

    // КОНСТАНТЫ ////////////////////////////////////////////////////////

    var RESOURCE_IMAGE =
        [
            { path: 'resources/images/snake.png', type: 'file_image' },
            { path: 'resources/images/food.png', type: 'file_image' },
            { path: 'resources/images/field.jpg', type: 'file_image' },
            { path: 'resources/images/intro.jpg', type: 'file_image' },
        ];

    var
        SNAKE_IMAGE = RESOURCE_IMAGE[0],
        FOOD_IMAGE = RESOURCE_IMAGE[1],
        FIELD_IMAGE = RESOURCE_IMAGE[2],
        INTRO_IMAGE = RESOURCE_IMAGE[3]
    ;

    var
        EVT_EMPTY = 0,
        EVT_TIMER = 600,

        EVT_CMD_NEW_FIGURE = 20,

        EVT_CMD_UP = 500,
        EVT_CMD_LEFT = 501,
        EVT_CMD_RIGHT = 502,
        EVT_CMD_DELETE_FOOD = 499,
        EVT_CMD_DROP = 504,
        EVT_CMD_DOWN = 505,

        EVT_CMD_PAUSE = 506,
        EVT_CMD_SPEED = 507,
        EVT_CMD_START = 503,

        EVT_CMD_MUSIC_ON = 509,
        EVT_CMD_MUSIC_OFF = 510,
        EVT_CMD_SOUND_ON = 511,
        EVT_CMD_SOUND_OFF = 512
    ;

    var
        C_KEY_LEFT = KeyCode.KEY_LEFT,
        C_KEY_RIGHT = KeyCode.KEY_RIGHT,
        C_KEY_ROTATE = KeyCode.KEY_SPACE,
        C_KEY_UP = KeyCode.KEY_UP,
        C_KEY_DOWN = KeyCode.KEY_DOWN,
        C_KEY_PAUSE = KeyCode.KEY_P,
        C_KEY_SPEED = KeyCode.KEY_L,
        C_KEY_START = KeyCode.KEY_SPACE
    ;

    var RT =
    {
        SCREEN: null,
        SCREEN_BUFFER: null,
    };

    var M_KEY_CMD = {};
    M_KEY_CMD[C_KEY_LEFT] = EVT_CMD_LEFT;
    M_KEY_CMD[C_KEY_RIGHT] = EVT_CMD_RIGHT;
    M_KEY_CMD[C_KEY_UP] = EVT_CMD_UP;
    M_KEY_CMD[C_KEY_DOWN] = EVT_CMD_DOWN;
    M_KEY_CMD[C_KEY_PAUSE] = EVT_CMD_PAUSE;
    M_KEY_CMD[C_KEY_SPEED] = EVT_CMD_SPEED;
    M_KEY_CMD[C_KEY_START] = EVT_CMD_START;

    var C_TIMER_INTERVAL_MS = [400, 200, 100];

	var 
        X_LEN = 16,
	    Y_LEN = 16,
        SNAKE_LEN = 5;
        CELL_LEN = 40;

    var
        C_CELLS_X = 16,
        C_CELLS_Y = 16,

        C_CELL_CX = 40,
        C_CELL_CY = 40,

        C_SCREEN_CX = C_CELLS_X * C_CELL_CX,
        C_SCREEN_CY = C_CELLS_Y * C_CELL_CY,

        C_SCREEN_CRECT = [0, 0, C_SCREEN_CX, C_SCREEN_CY],
        C_CELL_CRECT = [0, 0, C_CELL_CX, C_CELL_CY];

        var SPRITE_X = 64;
        var SPRITE_Y = 64;

	var 
        GAME_STATE = 0,
        IS_RUNNING = 1 << 1,
        IS_PAUSE = 1 << 2,
        IS_END_WIN = 1 << 3,
        IS_END_LOSE = 1 << 4,
        IS_LEVEL_END = 1 << 5,
        IS_WAIT = 1 << 6
    ;

    var MAX_FOODS = [13,16,19];

    var
        SNAKE_STATE = 4,
        SNAKE_MOVE_UP = 1 << 0,
        SNAKE_MOVE_DOWN = 1 << 1,
        SNAKE_MOVE_LEFT = 1 << 2,
        SNAKE_MOVE_RIGHT = 1 << 3,
        SNAKE_MOVE_RIGHT_TO_UP = 1 << 4,
        SNAKE_MOVE_LEFT_TO_UP = 1 << 5,
        SNAKE_MOVE_RIGHT_TO_DOWN = 1 << 6,
        SNAKE_MOVE_LEFT_TO_DOWN = 1 << 7,
        SNAKE_MOVE_DOWN_TO_LEFT = 1 << 8,
        SNAKE_MOVE_DOWN_TO_RIGHT = 1 << 9,
        SNAKE_MOVE_UP_TO_LEFT = 1 << 10,
        SNAKE_MOVE_UP_TO_RIGHT = 1 << 11
    ;

    var
        BODY_MOVE_UP_SPRITE = BODY_MOVE_DOWN_SPRITE = [2 * SPRITE_X, 1 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        BODY_MOVE_LEFT_SPRITE = BODY_MOVE_RIGHT_SPRITE = [1 * SPRITE_X, 0 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        BODY_MOVE_UP_TO_RIGHT_SPRITE = BODY_MOVE_LEFT_TO_DOWN_SPRITE = [0 * SPRITE_X, 0 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        BODY_MOVE_UP_TO_LEFT_SPRITE = BODY_MOVE_RIGHT_TO_DOWN_SPRITE = [2 * SPRITE_X, 0 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        BODY_MOVE_DOWN_TO_RIGHT_SPRITE = BODY_MOVE_LEFT_TO_UP_SPRITE = [0 * SPRITE_X, 1 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        BODY_MOVE_DOWN_TO_LEFT_SPRITE = BODY_MOVE_RIGHT_TO_UP_SPRITE = [2 * SPRITE_X, 2 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        HEAD_MOVE_UP_SPRITE = [3 * SPRITE_X, 0 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        HEAD_MOVE_DOWN_SPRITE = [4 * SPRITE_X, 1 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        HEAD_MOVE_LEFT_SPRITE = [3 * SPRITE_X, 1 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        HEAD_MOVE_RIGHT_SPRITE = [4 * SPRITE_X, 0 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        TAIL_MOVE_UP_SPRITE = [3 * SPRITE_X, 2 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        TAIL_MOVE_DOWN_SPRITE = [4 * SPRITE_X, 3 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        TAIL_MOVE_LEFT_SPRITE = [3 * SPRITE_X, 3 * SPRITE_Y, SPRITE_X, SPRITE_Y],
        TAIL_MOVE_RIGHT_SPRITE = [4 * SPRITE_X, 2 * SPRITE_Y, SPRITE_X, SPRITE_Y]
    ;

    var 
        FOOD_SPRITE = [[3, -5, 64, 64], [70, -5, 64, 64], [128, -7, 64, 64]],
        FIELD_SPRITE = [[50, 50, 50, 50], [100, 50, 50, 50]],
        INTRO = [360,0,1200,1200];
    ;

    var 
        x = _.range(0, X_LEN, 1),
        cx = _.range(0, (X_LEN) * CELL_LEN, CELL_LEN)
    ;
    
    var 
        y = _.range(0, Y_LEN, 1),
        cy = _.range(0, (Y_LEN) * CELL_LEN, CELL_LEN)
    ;

	var 
        xy = cartesianProduct(x, y),
        cxcy = cartesianProduct(cx, cy,[C_CELL_CX],[C_CELL_CY])
    ;

    var string_field = _.map(xy, function (v, k, l) {
        return To_Str(v);
    });

    // Вспомогательные мн-ва для отрисовки поля

    var 
        x1 = _.range(0, X_LEN, 2),
        y1 = _.range(0, Y_LEN, 2),
        x2 = _.range(1, X_LEN + 1, 2),
        y2 = _.range(1, Y_LEN + 1, 2),
        xy1 = cartesianProduct(x1, y1),
        xy2 = cartesianProduct(x2, y2);

    var string_field1 = _.map(_.union(xy1,xy2), function (v, k, l) {
            return To_Str(v);
    });

    xy1 = cartesianProduct(x1, y2);
    xy2 = cartesianProduct(x2, y1);

    var string_field2 = _.map(_.union(xy1, xy2), function (v, k, l) {
        return To_Str(v);
    });

        // ТАБЛИЦЫ СООТВЕТСТВИЯ ////////////////////////////////////////////////////////////////////////////////////////

    var body_dir_to_sprite = _.object([SNAKE_MOVE_UP, SNAKE_MOVE_DOWN, SNAKE_MOVE_LEFT, SNAKE_MOVE_RIGHT, SNAKE_MOVE_RIGHT_TO_UP,
        SNAKE_MOVE_UP_TO_RIGHT, SNAKE_MOVE_LEFT_TO_UP, SNAKE_MOVE_UP_TO_LEFT, SNAKE_MOVE_RIGHT_TO_DOWN, SNAKE_MOVE_DOWN_TO_RIGHT,
        SNAKE_MOVE_LEFT_TO_DOWN, SNAKE_MOVE_DOWN_TO_LEFT], [BODY_MOVE_UP_SPRITE, BODY_MOVE_DOWN_SPRITE, BODY_MOVE_LEFT_SPRITE, BODY_MOVE_RIGHT_SPRITE,
        BODY_MOVE_RIGHT_TO_UP_SPRITE, BODY_MOVE_UP_TO_RIGHT_SPRITE, BODY_MOVE_LEFT_TO_UP_SPRITE, BODY_MOVE_UP_TO_LEFT_SPRITE, BODY_MOVE_RIGHT_TO_DOWN_SPRITE,
        BODY_MOVE_DOWN_TO_RIGHT_SPRITE, BODY_MOVE_LEFT_TO_DOWN_SPRITE, BODY_MOVE_DOWN_TO_LEFT_SPRITE]);

    var head_dir_to_sprite = _.object([SNAKE_MOVE_UP, SNAKE_MOVE_DOWN, SNAKE_MOVE_LEFT, SNAKE_MOVE_RIGHT, SNAKE_MOVE_RIGHT_TO_UP,
        SNAKE_MOVE_UP_TO_RIGHT, SNAKE_MOVE_LEFT_TO_UP, SNAKE_MOVE_UP_TO_LEFT, SNAKE_MOVE_RIGHT_TO_DOWN, SNAKE_MOVE_DOWN_TO_RIGHT,
        SNAKE_MOVE_LEFT_TO_DOWN, SNAKE_MOVE_DOWN_TO_LEFT], [HEAD_MOVE_UP_SPRITE, HEAD_MOVE_DOWN_SPRITE, HEAD_MOVE_LEFT_SPRITE, HEAD_MOVE_RIGHT_SPRITE,
        HEAD_MOVE_UP_SPRITE, HEAD_MOVE_RIGHT_SPRITE, HEAD_MOVE_UP_SPRITE, HEAD_MOVE_LEFT_SPRITE, HEAD_MOVE_DOWN_SPRITE, HEAD_MOVE_RIGHT_SPRITE,
        HEAD_MOVE_DOWN_SPRITE, HEAD_MOVE_LEFT_SPRITE]);

    var tail_dir_to_sprite = _.object([SNAKE_MOVE_UP, SNAKE_MOVE_DOWN, SNAKE_MOVE_LEFT, SNAKE_MOVE_RIGHT, SNAKE_MOVE_RIGHT_TO_UP,
        SNAKE_MOVE_UP_TO_RIGHT, SNAKE_MOVE_LEFT_TO_UP, SNAKE_MOVE_UP_TO_LEFT, SNAKE_MOVE_RIGHT_TO_DOWN, SNAKE_MOVE_DOWN_TO_RIGHT,
        SNAKE_MOVE_LEFT_TO_DOWN, SNAKE_MOVE_DOWN_TO_LEFT], [TAIL_MOVE_UP_SPRITE, TAIL_MOVE_DOWN_SPRITE, TAIL_MOVE_LEFT_SPRITE, TAIL_MOVE_RIGHT_SPRITE,
        TAIL_MOVE_UP_SPRITE, TAIL_MOVE_RIGHT_SPRITE, TAIL_MOVE_UP_SPRITE, TAIL_MOVE_LEFT_SPRITE, TAIL_MOVE_DOWN_SPRITE, TAIL_MOVE_RIGHT_SPRITE,
        TAIL_MOVE_DOWN_SPRITE, TAIL_MOVE_LEFT_SPRITE]);


    var Str_To_Num_Table = _.object(string_field, xy);
    
    var xy_cxcy = _.object(string_field, cxcy);

    // ПЕРЕМЕННЫЕ ///////////////////////////////////////////////////////////////////////////////////////////////////

    var     
        level = 0,
        score = 0,
        click_counter = 0;

    var 
        snake = [],
        food_field = [],
        snake_direction = {};

    // ФУНКЦИИ //////////////////////////////////////////////////////////////////////////////////////////////////////

    function reset_snake() { // возвращает зменю в первоначальное положение и размеры
        var snake_x = _.range((X_LEN >> 1) - (SNAKE_LEN >> 1), (X_LEN >> 1) + (SNAKE_LEN >> 1), 1);
	    var snake_y = [Y_LEN >> 1];
        snake = cartesianProduct(snake_x, snake_y);
        snake = _.map(snake, function (v, k, l) {
            return (To_Str(v));
        });
    }

    function fill_food_field (size) { // заполняет поле едой
        food_field.length = size;
        food_field = _.map(food_field, function (v, k, l) {
            var x = _.random(1, 15);
            var y = _.random(1, 15);
            return ('' + x + 'x' + y);
        })
        food_field = _.difference(food_field, snake);
    }

    function choose_direction(head_pos, old_head_pos) { // Заполняем поле направлений
        // head_pos - координаты головы после перемещения в формате [A,B]
        // old_head_pos - координаты головы до перемещения в формате [A,B]
        var str_head_pos = To_Str(head_pos);
        var str_old_head_pos = To_Str(old_head_pos);
        snake_direction[str_head_pos] = SNAKE_STATE;
        var prev_direction = snake_direction[str_old_head_pos];
        switch (true) {
            case !(SNAKE_STATE & prev_direction):
                switch (true) {
                    case !!(prev_direction & SNAKE_MOVE_UP):
                        switch (true) {
                            case !!(SNAKE_STATE & SNAKE_MOVE_LEFT):
                                snake_direction[str_old_head_pos] = SNAKE_MOVE_UP_TO_LEFT;
                                break;
                            case !!(SNAKE_STATE & SNAKE_MOVE_RIGHT):
                                snake_direction[str_old_head_pos] = SNAKE_MOVE_UP_TO_RIGHT;
                                break;
                        }
                        break;
                    case !!(prev_direction & SNAKE_MOVE_DOWN):
                        switch (true) {
                            case !!(SNAKE_STATE & SNAKE_MOVE_LEFT):
                                snake_direction[str_old_head_pos] = SNAKE_MOVE_DOWN_TO_LEFT;
                                break;
                            case !!(SNAKE_STATE & SNAKE_MOVE_RIGHT):
                                snake_direction[str_old_head_pos] = SNAKE_MOVE_DOWN_TO_RIGHT;
                                break;
                        }
                        break;
                    case !!(prev_direction & SNAKE_MOVE_LEFT):
                        switch (true) {
                            case !!(SNAKE_STATE & SNAKE_MOVE_UP):
                                snake_direction[str_old_head_pos] = SNAKE_MOVE_LEFT_TO_UP;
                                break;
                            case !!(SNAKE_STATE & SNAKE_MOVE_DOWN):
                                snake_direction[str_old_head_pos] = SNAKE_MOVE_LEFT_TO_DOWN;
                                break;
                        }
                        break;
                    case !!(prev_direction & SNAKE_MOVE_RIGHT):
                        switch (true) {
                            case !!(SNAKE_STATE & SNAKE_MOVE_UP):
                            snake_direction[str_old_head_pos] = SNAKE_MOVE_RIGHT_TO_UP;
                                break;
                            case !!(SNAKE_STATE & SNAKE_MOVE_DOWN):
                            snake_direction[str_old_head_pos] = SNAKE_MOVE_RIGHT_TO_DOWN;
                                break;
                        }
                        break;
                }
                break;
        }
        // Заполняем ячейки поля направлений, где змеи нет 0
        fill_map_by_keys(snake_direction, _.difference(string_field, snake), 0)
    }

    function snake_move(head_pos) {
        // old_snake - множество координат клеток змени до перемещения
        // head_pos - координаты головы змеи в формате [A,B]
        var old_head_pos = [[], []];
        old_head_pos[0] = (Str_To_Num_Table[snake[0]])[0];
        old_head_pos[1] = (Str_To_Num_Table[snake[0]])[1];        
        // Сохраняем множество координат клеток змеи до перемещения
        var old_snake = _.map(snake, function (v, k, l) { return v; });
        // Если змея врезалась в саму себя
        if (_.intersection([To_Str(head_pos)], snake).length) GAME_STATE = IS_END_LOSE; 
        snake[0] = To_Str(head_pos);
        snake = _.union([snake[0]], old_snake);
        choose_direction(head_pos, old_head_pos);
        // Если змея съела еду
        if (!_.intersection(snake, food_field).length) {
            snake = _.difference(snake, [old_snake[old_snake.length - 1]]);
        }
    }

        function reset_game() {
            level = 0;
            score = 0;
            fill_food_field(MAX_FOODS[level]);
            reset_snake();
            //snake_direction = [SNAKE_MOVE_LEFT, SNAKE_MOVE_LEFT, SNAKE_MOVE_LEFT, SNAKE_MOVE_LEFT];
            fill_map_by_keys(snake_direction, string_field, 0);
            fill_map_by_keys(snake_direction, snake, SNAKE_MOVE_LEFT);
            SNAKE_STATE = SNAKE_MOVE_LEFT;
        }

    function click_gateway(event) {
        if (event.keyCode in M_KEY_CMD) events_gateway(M_KEY_CMD[event.keyCode]);
    }

    function events_gateway(id) {
        switch (id) {

            case EVT_CMD_START:
                switch (true) {
                    // Переходим на IS WAIT после прохождения уровня
                    case !!(GAME_STATE & IS_LEVEL_END):
                        GAME_STATE = IS_WAIT;
                        if (++level > 2) {
                            level = 0;
                            GAME_STATE = IS_END_WIN;
                            render();
                        }
                        fill_food_field(MAX_FOODS[level]);
                        events_gateway(EVT_CMD_START);
                        return;
                        // Переходим на IS WAIT после победы/поражения
                    case !!(GAME_STATE & (IS_END_LOSE | IS_END_WIN)):
                        GAME_STATE = IS_WAIT;
                        reset_game();
                        return;
                        // Переходим на IS RUNNING
                    case !!(GAME_STATE & IS_WAIT):
                        GAME_STATE = IS_RUNNING;
                        render();
                        return;
                } break;

                case EVT_CMD_PAUSE:
			if(GAME_STATE & IS_PAUSE) GAME_STATE = BITS(GAME_STATE, 0, IS_PAUSE);
			else GAME_STATE |= IS_PAUSE;
			render();
		    return;

            case EVT_TIMER: {
                if (!!(GAME_STATE & (IS_END_WIN | IS_END_LOSE | IS_PAUSE | IS_WAIT | IS_LEVEL_END))) return;
                // Координаты головы
                var head_pos = [[], []];
                head_pos[0] = (Str_To_Num_Table[snake[0]])[0];
                head_pos[1] = (Str_To_Num_Table[snake[0]])[1];        
                switch (true) 
                {
                    case !!(SNAKE_STATE & SNAKE_MOVE_UP):
                        head_pos[1] -= 1;
                        snake_move(head_pos);
                        break;
                    case !!(SNAKE_STATE & SNAKE_MOVE_DOWN):
                        head_pos[1] += 1;
                        snake_move(head_pos);
                        break;
                    case !!(SNAKE_STATE & SNAKE_MOVE_LEFT):
                        head_pos[0] -= 1;
                        snake_move(head_pos);
                        break;
                    case !!(SNAKE_STATE & SNAKE_MOVE_RIGHT):
                        head_pos[0] += 1;
                        snake_move(head_pos);
                        break;
                }

                events_gateway(EVT_CMD_DELETE_FOOD);

                switch (true)
                {
                    // Если змея вышла за пределы поля
                    case !!((_.difference(snake, string_field)).length):
                        GAME_STATE = IS_END_LOSE;
                        break;
                    // Если закончилась еда на поле
                    case !(food_field.length):
                        GAME_STATE = IS_LEVEL_END;
                        break;
                }

                render();
            } break;
            case EVT_CMD_UP:
                if (!(SNAKE_STATE & SNAKE_MOVE_DOWN) & !(click_counter))
                    SNAKE_STATE = SNAKE_MOVE_UP; 
                    ++click_counter;
                return;

            case EVT_CMD_DOWN:
                if (!(SNAKE_STATE & SNAKE_MOVE_UP) & !(click_counter))
                    SNAKE_STATE = SNAKE_MOVE_DOWN; 
                    ++click_counter;
                return;

            case EVT_CMD_RIGHT:
                if (!(SNAKE_STATE & SNAKE_MOVE_LEFT) & !(click_counter))
                    SNAKE_STATE = SNAKE_MOVE_RIGHT; 
                    ++click_counter;
                return;

            case EVT_CMD_LEFT:
                if (!(SNAKE_STATE & SNAKE_MOVE_RIGHT) & !(click_counter))
                    SNAKE_STATE = SNAKE_MOVE_LEFT; 
                    ++click_counter;
                return;

            case EVT_CMD_DELETE_FOOD:
                // Удаляем конкретный фрукт из множества food_field, если змея его съела
                if (_.intersection(food_field, snake).length) {
                    food_field = _.difference(food_field, snake);
                    score += 1 * (level + 1);
                }
                click_counter = 0;
                break;
        }
    }

    async function init() {
        //------------------------------------------
        // LOAD RESOURCES
        //------------------------------------------

        await __.RHAL.load_files(RESOURCE_IMAGE);

        //------------------------------------------
        // INIT SCREEN & DOUBLE BUFFER
        //------------------------------------------
        RT.SCREEN = new_clone(__.RHAL.struct_surface_2d);
        RT.SCREEN_BUFFER = new_clone(__.RHAL.struct_surface_2d);
        RT.SCREEN.container = 'main_screen';
        __.RHAL.init_surface_2d(true, RT.SCREEN, C_SCREEN_CRECT);
        __.RHAL.init_surface_2d(true, RT.SCREEN_BUFFER, C_SCREEN_CRECT);
        //------------------------------------------

        document.addEventListener('keydown', function (event) { click_gateway(event); });

        reset_game();

        setInterval(async function () { events_gateway(EVT_TIMER) }, C_TIMER_INTERVAL_MS[level]);
    }

    async function main() {
        await init();
        GAME_STATE = IS_WAIT;
        draw_api(DRAW_BITBLIT, { surface: RT.SCREEN, crect: C_SCREEN_CRECT, crect_uv: INTRO, resource: INTRO_IMAGE.resource });
    }

    function render() {
        draw_api(DRAW_CLEAR, { surface: RT.SCREEN_BUFFER, crect: C_SCREEN_CRECT });

        switch (true) {

            case !!(GAME_STATE & (IS_RUNNING | IS_END_WIN | IS_LEVEL_END)):
                // Задний фон
                _.each(string_field1, function (v, k, l) {
                    draw_api(DRAW_BITBLIT, { surface: RT.SCREEN_BUFFER, crect: xy_cxcy[v], crect_uv: FIELD_SPRITE[0], resource: FIELD_IMAGE.resource })
                });
                // Задний фон
                _.each(string_field2, function (v, k, l) {
                    draw_api(DRAW_BITBLIT, { surface: RT.SCREEN_BUFFER, crect: xy_cxcy[v], crect_uv: FIELD_SPRITE[1], resource: FIELD_IMAGE.resource })
                });
                // Еда
                _.each(food_field, function (v, k, l) {
                    draw_api(DRAW_BITBLIT, { surface: RT.SCREEN_BUFFER, crect: xy_cxcy[v], crect_uv: FOOD_SPRITE[level], resource: FOOD_IMAGE.resource })
                });
                // Змея
                _.each(snake, function (v, k, l) {
                    switch (true) {
                        // Голова
                        case !k:
                            draw_api(DRAW_BITBLIT, { surface: RT.SCREEN_BUFFER, crect: xy_cxcy[v], crect_uv: head_dir_to_sprite[snake_direction[v]], resource: SNAKE_IMAGE.resource });
                            break;
                        // Тело
                        case (k == (snake.length - 1)):
                            draw_api(DRAW_BITBLIT, { surface: RT.SCREEN_BUFFER, crect: xy_cxcy[v], crect_uv: tail_dir_to_sprite[snake_direction[v]], resource: SNAKE_IMAGE.resource });
                            break;
                        // Хвост
                        default:
                            draw_api(DRAW_BITBLIT, { surface: RT.SCREEN_BUFFER, crect: xy_cxcy[v], crect_uv: body_dir_to_sprite[snake_direction[v]], resource: SNAKE_IMAGE.resource });
                            break;
                    }
                });
                break;
        }
                draw_api(DRAW_TEXT,
                    {
                        surface: RT.SCREEN_BUFFER,
                        is_switch_font: true,
                        font: 'RESOURCE_FONT_SCORE',
                        font_height: 20,
                        is_fill: true,
                        fill_color: 'brown',
                        is_stroke: false,
                        stroke_color: 'black',
                        stroke_width: 2,
                        x: 0,
                        y: 4,
                        text: '        level: ' + (level+1) + '   score: ' + score * 50,
                    });

                var state_text = null;
                var x = 0;
                switch (true) {
                    // Уровен пройден
                    case !!(GAME_STATE & IS_LEVEL_END):
                        state_text = 'Level completed';
                        x = C_SCREEN_CX / 2 - 250;
                        break;
                    // Победа
                    case !!(GAME_STATE & IS_END_WIN):
                        state_text = 'Win';
                        x = C_SCREEN_CX / 2 - 60;
                        break;
                    // Поражение
                    case !!(GAME_STATE & IS_END_LOSE):
                        state_text = 'Loose';
                        x = C_SCREEN_CX / 2 - 90;
                        break;
                    // Пауза
                    case !!(GAME_STATE & IS_PAUSE):
                        if (!state_text) { state_text = 'Pause'; x = C_SCREEN_CX / 2 - 60; }
                        break;
        }
        if (state_text) {
            draw_api(DRAW_TEXT,
                {
                    surface: RT.SCREEN_BUFFER,
                    is_switch_font: true,
                    font: 'RESOURCE_FONT_MAIN',
                    font_height: 60,
                    is_fill: true,
                    fill_color: 'white',
                    is_stroke: true,
                    stroke_color: 'black',
                    stroke_width: 2,
                    x: x,
                    y: C_SCREEN_CY / 2,
                    text: state_text,
                });
        }
        draw_api(DRAW_BITBLIT,	{ surface : RT.SCREEN, crect : C_SCREEN_CRECT, crect_uv : C_SCREEN_CRECT, resource : RT.SCREEN_BUFFER.draw_api.canvas } );
    }  

</script>

    <h1>Game</h1>

    <button onclick=events_gateway(EVT_CMD_START)>Start</button><br>
    <br>
    <br><br>

    <canvas id=main_screen class="css_main_screen"></canvas>

    <br><br>
    Move Keys: Up,Down,Left,Right
    <br>
    Control Keys: Space - Start, P - Pause
    <br><br>
    <br>

</body>
</html>
